name: Create Tag and Release
permissions:
  contents: write
on:
  pull_request:
    branches:
      - main
    types:
      - closed
jobs:
  tag-and-release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Validate PR title
        run: |
          echo "Checking PR Title: ${{ github.event.pull_request.title }}"
          PR_TITLE="${{ github.event.pull_request.title }}"

          if [[ ! "$PR_TITLE" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            echo "::error::PR title must be a valid semantic version like v1.0.0"
            exit 1
          else
            echo "PR title is a valid semantic version."
          fi
      - name: Extract version from PR title
        run: |
          echo "Extracting version from PR title: ${{ github.event.pull_request.title }}"
          VERSION=${{ github.event.pull_request.title }}
          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
      - name: Extract org and repo dynamically
        run: |
          FULL_REPO="${{ github.repository }}"
          echo "FULL_REPO=$FULL_REPO"
          ORG=$(echo "$FULL_REPO" | cut -d'/' -f1)
          REPO=$(echo "$FULL_REPO" | cut -d'/' -f2)
          echo "ORG=$ORG" >> $GITHUB_ENV
          echo "REPO=$REPO" >> $GITHUB_ENV
      - name: Check if release already exists
        env:
          RELEASE_VERSION: ${{ env.RELEASE_VERSION }}
          MY_PAT: ${{ secrets.RELEASE_TOKEN }}
          ORG: ${{ env.ORG }}
          REPO: ${{ env.REPO }}
        run: |
          echo "Checking if release for $RELEASE_VERSION already exists..."
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: token $MY_PAT" \
            https://api.github.com/repos/$ORG/$REPO/releases/tags/$RELEASE_VERSION)
          if [[ "$HTTP_STATUS" == "200" ]]; then
            echo "::error::Release $RELEASE_VERSION already exists."
            exit 1
          else
            echo "No existing release found."
          fi
      - name: Create Release
        run: gh release create "$RELEASE_VERSION" --generate-notes --latest --target main
        env:
          GH_TOKEN: ${{ secrets.RELEASE_TOKEN }}